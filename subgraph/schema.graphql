type Approval @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  spender: Bytes! # address
  TBImpl_id: BigInt! # uint256
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MinterRemoved @entity(immutable: true) {
  id: Bytes!
  minter: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MinterReplaced @entity(immutable: true) {
  id: Bytes!
  tokenId: BigInt! # uint256
  oldMinter: Bytes! # address
  newMinter: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OperatorSet @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  spender: Bytes! # address
  approved: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TokenInterTransferAllowed @entity(immutable: true) {
  id: Bytes!
  tokenId: BigInt! # uint256
  isTransferable: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TokenInterTransfered @entity(immutable: true) {
  id: Bytes!
  from: Bytes! # address
  receiver: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TokenItrAfterExpiryAllowed @entity(immutable: true) {
  id: Bytes!
  tokenId: BigInt! # uint256
  isTransferable: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Transfer @entity(immutable: true) {
  id: Bytes!
  caller: Account! # address
  sender: Account! # address
  receiver: Account! # address
  TBImpl_id: BigInt! # uint256
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Account @entity {
  id: Bytes!
  balance: BigInt!
  callerTransfers: [Transfer!] @derivedFrom(field: "caller")
  senderTransfers: [Transfer!] @derivedFrom(field: "sender")
  receiverTransfers: [Transfer!] @derivedFrom(field: "receiver")
}